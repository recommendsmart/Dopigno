<?php

/**
 * @file
 * Install, update, and uninstall functions for the user_bundle module.
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Field\BaseFieldDefinition;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_install().
 */
function user_bundle_install() {
  $manager = \Drupal::entityDefinitionUpdateManager();
  $module_handler = \Drupal::service('module_handler');

  // Add the "type" (bundle) field to user entities.
  $storage_definition = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Account type'))
    ->setDescription(t('The user account type.'))
    ->setSetting('target_type', 'user_type')
    ->setRequired(TRUE)
    ->setReadOnly(TRUE);
  $manager->installFieldStorageDefinition('type', 'user', 'user', $storage_definition);

  // Set bundle for existing users.
  $connection = Database::getConnection();
  $connection
    ->update('users')
    ->fields([
      'type' => 'user',
    ])
    ->execute();
  if ($module_handler->moduleExists('field')) {
    $connection
      ->update('users_field_data')
      ->fields([
        'type' => 'user',
      ])
      ->execute();
  }

  // Set this new bundle field as an entity key.
  $user_entity_type = $manager->getEntityType('user');
  $keys = $user_entity_type->getKeys();
  $keys['bundle'] = 'type';
  $user_entity_type->set('entity_keys', $keys);
  $manager->updateEntityType($user_entity_type);
  $manager->updateFieldStorageDefinition($manager->getFieldStorageDefinition('type', 'user'));

  // Add a new "Type" column and filter into the admin/people view.
  if ($module_handler->moduleExists('views')
    && ($view = \Drupal::configFactory()->getEditable('views.view.user_admin_people'))) {
    $base = $module_handler->getModule('user_bundle')->getPath() . '/install';

    // Add "Type" field to view, as the third field.
    $config = $view->get('display.default.display_options.fields');
    $config = array_slice($config, 0, 2, TRUE) +
      ['type' => Yaml::parse(file_get_contents("$base/display.default.display_options.fields.type.yml"))] +
      array_slice($config, 2, count($config) - 1, TRUE);
    $view->set('display.default.display_options.fields', $config);

    // Add "Type" column to the table.
    $view->set('display.default.display_options.style.options.columns.type', 'type');
    $view->set('display.default.display_options.style.options.info.type', Yaml::parse(file_get_contents("$base/display.default.display_options.style.options.info.type.yml")));

    // Add "Type" exposed filter, as the second filter.
    $config = $view->get('display.default.display_options.filters');
    $config = array_slice($config, 0, 1, TRUE) +
      ['type' => Yaml::parse(file_get_contents("$base/display.default.display_options.filters.type.yml"))] +
      array_slice($config, 1, count($config) - 1, TRUE);
    $view->set('display.default.display_options.filters', $config);

    // Save our changes.
    $view->save(TRUE);
  }
}

/**
 * Implements hook_uninstall().
 */
function user_bundle_uninstall() {
  // Remove "Type" column and filter from the admin/people view.
  $module_handler = \Drupal::service('module_handler');
  if ($module_handler->moduleExists('views')
    && ($view = \Drupal::configFactory()->getEditable('views.view.user_admin_people'))) {
    $view = \Drupal::configFactory()->getEditable('views.view.user_admin_people');
    $properties = [
      'display.default.display_options.fields',
      'display.default.display_options.style.options.columns',
      'display.default.display_options.style.options.info',
      'display.default.display_options.filters',
    ];
    foreach ($properties as $property) {
      $config = $view->get($property);
      if (isset($config['type'])) {
        unset($config['type']);
        $view->set($property, $config);
      }
    }
    $view->save(TRUE);
  }

  // Remove the Account type field from users.
  $manager = \Drupal::entityDefinitionUpdateManager();
  if ($definition = $manager->getFieldStorageDefinition('type', 'user')) {
    $manager->uninstallFieldStorageDefinition($definition);
  }
}
